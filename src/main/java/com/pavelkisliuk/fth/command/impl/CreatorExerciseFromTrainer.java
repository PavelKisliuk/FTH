/*  By Pavel Kisliuk, 11.07.2019
 *  This is class for education and nothing rights don't reserved.
 */

package com.pavelkisliuk.fth.command.impl;

import com.pavelkisliuk.fth.exception.FthCommandException;
import com.pavelkisliuk.fth.exception.FthRepositoryException;
import com.pavelkisliuk.fth.model.FthExerciseFromTrainer;
import com.pavelkisliuk.fth.model.FthInt;
import com.pavelkisliuk.fth.model.FthLong;
import com.pavelkisliuk.fth.model.exercise.ExerciseComponent;
import com.pavelkisliuk.fth.model.exercise.ExerciseUnitComposite;
import com.pavelkisliuk.fth.model.exercise.SetLeaf;
import com.pavelkisliuk.fth.repository.FthRepository;
import com.pavelkisliuk.fth.service.FthService;
import com.pavelkisliuk.fth.specifier.FthSelectSpecifier;
import com.pavelkisliuk.fth.specifier.select.LastNumberClientExerciseSelectSpecifier;

import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Type;

/**
 * The {@code CreatorExerciseFromTrainer} class is {@code FthDataByRequestFactory} realization for
 * creation composition of exercise generated by trainer.
 * <p>
 *
 * @author Kisliuk Pavel Sergeevich
 * @since 12.0
 */
class CreatorExerciseFromTrainer implements FthDataByRequestFactory {
	// FIXME: 11.08.2019 вынести в интерфейс если нужно
	private static final String EXERCISE = "exercise";
	private static final String CLIENT_ID = "clientId";

	/**
	 * Create composition of exercise. Composition consist of 3 level's.
	 * First level is exercise. Second level is drill's of exercise. Third level is
	 * set's of drill.
	 * <p>
	 *
	 * @param request of data for creation {@code ExerciseComponent} instance.
	 * @return composition of exercise.
	 * @throws FthCommandException if {@code FthRepositoryException};
	 */
	@Override
	public ExerciseComponent create(HttpServletRequest request) throws FthCommandException {
		//Retrieve exercise from trainer as JSON string.
		String jsonExercise = request.getParameter(EXERCISE);
		long clientId = Long.parseLong(request.getParameter(CLIENT_ID));
		//Translate exercise to {@code FthExerciseFromTrainer} array's.
		FthExerciseFromTrainer[] exerciseFromTrainer =
				FthService.GSON.fromJson(jsonExercise, (Type) FthExerciseFromTrainer[].class);

		ExerciseComponent exercise = new ExerciseUnitComposite();
		ExerciseComponent drill = new ExerciseUnitComposite();
		int orderDrill = 1;
		//all leaf's share this data
		SetLeaf.Exercise commonExercise = new SetLeaf.Exercise();
		int currentExerciseNumber = getCurrentExerciseNumber(clientId);
		commonExercise.setClientId(clientId);
		commonExercise.setExerciseNumber(currentExerciseNumber);
		for (FthExerciseFromTrainer element : exerciseFromTrainer) {
			ExerciseComponent set = new ExerciseUnitComposite();
			//all leaf's OF THIS LEVEL share this data
			SetLeaf.Drill commonDrill = new SetLeaf.Drill();
			commonDrill.setDrillBaseId(element.getDrillId());
			commonDrill.setMuscleGroupId(element.getMuscleGroupId());
			commonDrill.setDrillOrder(orderDrill);
			int orderSet = 1;
			for (int i = 0; i < element.getSetAmount(); i++) {
				SetLeaf setLeaf = new SetLeaf();
				setLeaf.setSetNumber(orderSet);
				setLeaf.setNecessaryReps(element.getRepeatAmount());
				setLeaf.setRestTime(element.getRestTime());
				setLeaf.setWeightTool(element.getWeightTool());
				setLeaf.setDrill(commonDrill);
				setLeaf.setExercise(commonExercise);
				set.add(setLeaf);
				orderSet++;
			}
			drill.add(set);
			orderDrill++;
		}
		exercise.add(drill);
		return exercise;
	}

	/**
	 * Retrieve number of current exercise.
	 * <p>
	 *
	 * @param clientId is ID of client.
	 * @return number of current exercise.
	 * @throws FthCommandException if {@code FthRepositoryException}.
	 */
	private int getCurrentExerciseNumber(long clientId) throws FthCommandException {
		FthInt lastExerciseNumber;
		try {
			FthLong clientIdWrap = new FthLong(clientId);
			FthSelectSpecifier selectSpecifier = new LastNumberClientExerciseSelectSpecifier(clientIdWrap);
			lastExerciseNumber = (FthInt) FthRepository.INSTANCE.query(selectSpecifier).get(0);
		} catch (FthRepositoryException e) {
			throw new FthCommandException(
					"FthRepositoryException in CreatorExerciseFromTrainer -> getCurrentExerciseNumber(long)", e);
		}
		return lastExerciseNumber.get();
	}
}